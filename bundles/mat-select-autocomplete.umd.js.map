{"version":3,"file":"mat-select-autocomplete.umd.js.map","sources":["ng://mat-select-autocomplete/lib/select-autocomplete.service.ts","ng://mat-select-autocomplete/lib/select-autocomplete.component.ts","ng://mat-select-autocomplete/lib/select-autocomplete.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SelectAutocompleteService {\n\n  constructor() { }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  ViewChild,\n  DoCheck\n} from \"@angular/core\";\nimport { FormControl } from \"@angular/forms\";\n\n@Component({\n  selector: \"mat-select-autocomplete\",\n  template: `\n    <mat-form-field appearance=\"{{ appearance }}\">\n      <mat-select\n        #selectElem\n        [placeholder]=\"placeholder\"\n        [formControl]=\"formControl\"\n        [multiple]=\"multiple\"\n        [(ngModel)]=\"selectedValue\"\n        (selectionChange)=\"onSelectionChange($event)\"\n      >\n        <div class=\"box-search\">\n          <mat-checkbox\n            *ngIf=\"multiple\"\n            color=\"primary\"\n            class=\"box-select-all\"\n            [(ngModel)]=\"selectAllChecked\"\n            (change)=\"toggleSelectAll($event)\"\n          ></mat-checkbox>\n          <input\n            #searchInput\n            type=\"text\"\n            [ngClass]=\"{ 'pl-1': !multiple }\"\n            (input)=\"filterItem(searchInput.value)\"\n            [placeholder]=\"selectPlaceholder\"\n          />\n          <div\n            class=\"box-search-icon\"\n            (click)=\"filterItem(''); searchInput.value = ''\"\n          >\n            <button mat-icon-button class=\"search-button\">\n              <mat-icon class=\"mat-24\" aria-label=\"Search icon\">clear</mat-icon>\n            </button>\n          </div>\n        </div>\n        <mat-select-trigger>\n          {{ onDisplayString() }}\n        </mat-select-trigger>\n        <mat-option\n          *ngFor=\"let option of options; trackBy: trackByFn\"\n          [disabled]=\"option.disabled\"\n          [value]=\"option[value]\"\n          [style.display]=\"hideOption(option) ? 'none' : 'flex'\"\n          >{{ option[display] }}\n        </mat-option>\n      </mat-select>\n      <mat-hint style=\"color:red\" *ngIf=\"showErrorMsg\">{{ errorMsg }}</mat-hint>\n    </mat-form-field>\n  `,\n  styles: [\n    `\n      .box-search {\n        margin: 8px;\n        border-radius: 2px;\n        box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.16),\n          0 0 0 1px rgba(0, 0, 0, 0.08);\n        transition: box-shadow 200ms cubic-bezier(0.4, 0, 0.2, 1);\n        display: flex;\n      }\n      .box-search input {\n        flex: 1;\n        border: none;\n        outline: none;\n      }\n      .box-select-all {\n        width: 36px;\n        line-height: 33px;\n        color: #808080;\n        text-align: center;\n      }\n      .search-button {\n        width: 36px;\n        height: 36px;\n        line-height: 33px;\n        color: #808080;\n      }\n      .pl-1 {\n        padding-left: 1rem;\n      }\n    `\n  ]\n})\nexport class SelectAutocompleteComponent implements OnChanges, DoCheck {\n  @Input() selectPlaceholder: string = \"search...\";\n  @Input() placeholder: string;\n  @Input() options;\n  @Input() disabled = false;\n  @Input() display = \"display\";\n  @Input() value = \"value\";\n  @Input() formControl: FormControl = new FormControl();\n  @Input() errorMsg: string = \"Field is required\";\n  @Input() showErrorMsg = false;\n  @Input() selectedOptions;\n  @Input() multiple = true;\n\n  // New Options\n  @Input() labelCount: number = 1;\n  @Input() appearance: \"standard\" | \"fill\" | \"outline\" = \"standard\";\n\n  @Output()\n  selectionChange: EventEmitter<any> = new EventEmitter();\n\n  @ViewChild(\"selectElem\") selectElem;\n\n  filteredOptions: Array<any> = [];\n  selectedValue: Array<any> = [];\n  selectAllChecked = false;\n  displayString = \"\";\n  constructor() {}\n\n  ngOnChanges() {\n    if (this.disabled) {\n      this.formControl.disable();\n    } else {\n      this.formControl.enable();\n    }\n    this.filteredOptions = this.options;\n    if (this.selectedOptions) {\n      this.selectedValue = this.selectedOptions;\n    } else if (this.formControl.value) {\n      this.selectedValue = this.formControl.value;\n    }\n  }\n\n  ngDoCheck() {\n    if (!this.selectedValue.length) {\n      this.selectionChange.emit(this.selectedValue);\n    }\n  }\n\n  toggleDropdown() {\n    this.selectElem.toggle();\n  }\n\n  toggleSelectAll(val) {\n    if (val.checked) {\n      this.filteredOptions.forEach(option => {\n        if (!this.selectedValue.includes(option[this.value])) {\n          this.selectedValue = this.selectedValue.concat([option[this.value]]);\n        }\n      });\n    } else {\n      const filteredValues = this.getFilteredOptionsValues();\n      this.selectedValue = this.selectedValue.filter(\n        item => !filteredValues.includes(item)\n      );\n    }\n    this.selectionChange.emit(this.selectedValue);\n  }\n\n  filterItem(value) {\n    this.filteredOptions = this.options.filter(\n      item => item[this.display].toLowerCase().indexOf(value.toLowerCase()) > -1\n    );\n    this.selectAllChecked = true;\n    this.filteredOptions.forEach(item => {\n      if (!this.selectedValue.includes(item[this.value])) {\n        this.selectAllChecked = false;\n      }\n    });\n    if (!this.filteredOptions.length) {\n      this.selectAllChecked = false;\n    }\n  }\n\n  hideOption(option) {\n    return !(this.filteredOptions.indexOf(option) > -1);\n  }\n\n  // Returns plain strings array of filtered values\n  getFilteredOptionsValues() {\n    const filteredValues = [];\n    this.filteredOptions.forEach(option => {\n      filteredValues.push(option.value);\n    });\n    return filteredValues;\n  }\n\n  onDisplayString() {\n    this.displayString = \"\";\n    if (this.selectedValue && this.selectedValue.length) {\n      let displayOption = [];\n      if (this.multiple) {\n        // Multi select display\n        for (let i = 0; i < this.labelCount; i++) {\n          displayOption[i] = this.options.filter(\n            option => option[this.value] === this.selectedValue[i]\n          )[0];\n        }\n        if (displayOption.length) {\n          for (let i = 0; i < displayOption.length; i++) {\n            if (displayOption[i] && displayOption[i][this.display]) {\n              this.displayString += displayOption[i][this.display] + \",\";\n            }\n          }\n          this.displayString = this.displayString.slice(0, -1);\n          if (\n            this.selectedValue.length > 1 &&\n            this.selectedValue.length > this.labelCount\n          ) {\n            this.displayString += ` (+${this.selectedValue.length -\n              this.labelCount} others)`;\n          }\n        }\n      } else {\n        // Single select display\n        displayOption = this.options.filter(\n          option => option[this.value] === this.selectedValue\n        );\n        if (displayOption.length) {\n          this.displayString = displayOption[0][this.display];\n        }\n      }\n    }\n    return this.displayString;\n  }\n\n  onSelectionChange(val) {\n    const filteredValues = this.getFilteredOptionsValues();\n    let count = 0;\n    if (this.multiple) {\n      this.selectedValue.filter(item => {\n        if (filteredValues.includes(item)) {\n          count++;\n        }\n      });\n      this.selectAllChecked = count === this.filteredOptions.length;\n    }\n    this.selectedValue = val.value;\n    this.selectionChange.emit(this.selectedValue);\n  }\n\n  public trackByFn(index, item) {\n    return item.value;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule, MatCheckboxModule } from '@angular/material';\nimport { SelectAutocompleteComponent } from './select-autocomplete.component';\n\n@NgModule({\n  imports: [\n    FormsModule,\n    CommonModule,\n    MatIconModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [SelectAutocompleteComponent],\n  exports: [SelectAutocompleteComponent]\n})\nexport class SelectAutocompleteModule { }\n"],"names":["Injectable","FormControl","EventEmitter","Component","Input","Output","ViewChild","NgModule","FormsModule","CommonModule","MatIconModule","MatButtonModule","MatSelectModule","MatCheckboxModule","MatFormFieldModule","ReactiveFormsModule"],"mappings":"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"}
