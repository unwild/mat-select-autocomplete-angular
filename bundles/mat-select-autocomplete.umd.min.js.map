{"version":3,"sources":["ng://mat-select-autocomplete/lib/select-autocomplete.service.ts","ng://mat-select-autocomplete/lib/select-autocomplete.component.ts","ng://mat-select-autocomplete/lib/select-autocomplete.module.ts"],"names":["SelectAutocompleteService","Injectable","args","providedIn","SelectAutocompleteComponent","FormControl","EventEmitter","prototype","ngOnChanges","this","disabled","formControl","disable","enable","filteredOptions","options","selectedOptions","selectedValue","value","ngDoCheck","length","selectionChange","emit","toggleDropdown","selectElem","toggle","toggleSelectAll","val","_this","checked","forEach","option","includes","concat","filteredValues_1","getFilteredOptionsValues","filter","item","filterItem","display","toLowerCase","indexOf","selectAllChecked","hideOption","filteredValues","push","onDisplayString","displayString","displayOption","multiple","i","this_1","labelCount","slice","onSelectionChange","count","trackByFn","index","Component","selector","template","Input","Output","ViewChild","SelectAutocompleteModule","NgModule","imports","FormsModule","CommonModule","MatIconModule","MatButtonModule","MatSelectModule","MatCheckboxModule","MatFormFieldModule","ReactiveFormsModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SelectAutocompleteService {\n\n  constructor() { }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  ViewChild,\n  DoCheck\n} from \"@angular/core\";\nimport { FormControl } from \"@angular/forms\";\n\n@Component({\n  selector: \"mat-select-autocomplete\",\n  template: `\n    <mat-form-field appearance=\"{{ appearance }}\">\n      <mat-select\n        #selectElem\n        [placeholder]=\"placeholder\"\n        [formControl]=\"formControl\"\n        [multiple]=\"multiple\"\n        [(ngModel)]=\"selectedValue\"\n        (selectionChange)=\"onSelectionChange($event)\"\n      >\n        <div class=\"box-search\">\n          <mat-checkbox\n            *ngIf=\"multiple\"\n            color=\"primary\"\n            class=\"box-select-all\"\n            [(ngModel)]=\"selectAllChecked\"\n            (change)=\"toggleSelectAll($event)\"\n          ></mat-checkbox>\n          <input\n            #searchInput\n            type=\"text\"\n            [ngClass]=\"{ 'pl-1': !multiple }\"\n            (input)=\"filterItem(searchInput.value)\"\n            [placeholder]=\"selectPlaceholder\"\n          />\n          <div\n            class=\"box-search-icon\"\n            (click)=\"filterItem(''); searchInput.value = ''\"\n          >\n            <button mat-icon-button class=\"search-button\">\n              <mat-icon class=\"mat-24\" aria-label=\"Search icon\">clear</mat-icon>\n            </button>\n          </div>\n        </div>\n        <mat-select-trigger>\n          {{ onDisplayString() }}\n        </mat-select-trigger>\n        <mat-option\n          *ngFor=\"let option of options; trackBy: trackByFn\"\n          [disabled]=\"option.disabled\"\n          [value]=\"option[value]\"\n          [style.display]=\"hideOption(option) ? 'none' : 'flex'\"\n          >{{ option[display] }}\n        </mat-option>\n      </mat-select>\n      <mat-hint style=\"color:red\" *ngIf=\"showErrorMsg\">{{ errorMsg }}</mat-hint>\n    </mat-form-field>\n  `,\n  styles: [\n    `\n      .box-search {\n        margin: 8px;\n        border-radius: 2px;\n        box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.16),\n          0 0 0 1px rgba(0, 0, 0, 0.08);\n        transition: box-shadow 200ms cubic-bezier(0.4, 0, 0.2, 1);\n        display: flex;\n      }\n      .box-search input {\n        flex: 1;\n        border: none;\n        outline: none;\n      }\n      .box-select-all {\n        width: 36px;\n        line-height: 33px;\n        color: #808080;\n        text-align: center;\n      }\n      .search-button {\n        width: 36px;\n        height: 36px;\n        line-height: 33px;\n        color: #808080;\n      }\n      .pl-1 {\n        padding-left: 1rem;\n      }\n    `\n  ]\n})\nexport class SelectAutocompleteComponent implements OnChanges, DoCheck {\n  @Input() selectPlaceholder: string = \"search...\";\n  @Input() placeholder: string;\n  @Input() options;\n  @Input() disabled = false;\n  @Input() display = \"display\";\n  @Input() value = \"value\";\n  @Input() formControl: FormControl = new FormControl();\n  @Input() errorMsg: string = \"Field is required\";\n  @Input() showErrorMsg = false;\n  @Input() selectedOptions;\n  @Input() multiple = true;\n\n  // New Options\n  @Input() labelCount: number = 1;\n  @Input() appearance: \"standard\" | \"fill\" | \"outline\" = \"standard\";\n\n  @Output()\n  selectionChange: EventEmitter<any> = new EventEmitter();\n\n  @ViewChild(\"selectElem\") selectElem;\n\n  filteredOptions: Array<any> = [];\n  selectedValue: Array<any> = [];\n  selectAllChecked = false;\n  displayString = \"\";\n  constructor() {}\n\n  ngOnChanges() {\n    if (this.disabled) {\n      this.formControl.disable();\n    } else {\n      this.formControl.enable();\n    }\n    this.filteredOptions = this.options;\n    if (this.selectedOptions) {\n      this.selectedValue = this.selectedOptions;\n    } else if (this.formControl.value) {\n      this.selectedValue = this.formControl.value;\n    }\n  }\n\n  ngDoCheck() {\n    if (!this.selectedValue.length) {\n      this.selectionChange.emit(this.selectedValue);\n    }\n  }\n\n  toggleDropdown() {\n    this.selectElem.toggle();\n  }\n\n  toggleSelectAll(val) {\n    if (val.checked) {\n      this.filteredOptions.forEach(option => {\n        if (!this.selectedValue.includes(option[this.value])) {\n          this.selectedValue = this.selectedValue.concat([option[this.value]]);\n        }\n      });\n    } else {\n      const filteredValues = this.getFilteredOptionsValues();\n      this.selectedValue = this.selectedValue.filter(\n        item => !filteredValues.includes(item)\n      );\n    }\n    this.selectionChange.emit(this.selectedValue);\n  }\n\n  filterItem(value) {\n    this.filteredOptions = this.options.filter(\n      item => item[this.display].toLowerCase().indexOf(value.toLowerCase()) > -1\n    );\n    this.selectAllChecked = true;\n    this.filteredOptions.forEach(item => {\n      if (!this.selectedValue.includes(item[this.value])) {\n        this.selectAllChecked = false;\n      }\n    });\n    if (!this.filteredOptions.length) {\n      this.selectAllChecked = false;\n    }\n  }\n\n  hideOption(option) {\n    return !(this.filteredOptions.indexOf(option) > -1);\n  }\n\n  // Returns plain strings array of filtered values\n  getFilteredOptionsValues() {\n    const filteredValues = [];\n    this.filteredOptions.forEach(option => {\n      filteredValues.push(option.value);\n    });\n    return filteredValues;\n  }\n\n  onDisplayString() {\n    this.displayString = \"\";\n    if (this.selectedValue && this.selectedValue.length) {\n      let displayOption = [];\n      if (this.multiple) {\n        // Multi select display\n        for (let i = 0; i < this.labelCount; i++) {\n          displayOption[i] = this.options.filter(\n            option => option[this.value] === this.selectedValue[i]\n          )[0];\n        }\n        if (displayOption.length) {\n          for (let i = 0; i < displayOption.length; i++) {\n            if (displayOption[i] && displayOption[i][this.display]) {\n              this.displayString += displayOption[i][this.display] + \",\";\n            }\n          }\n          this.displayString = this.displayString.slice(0, -1);\n          if (\n            this.selectedValue.length > 1 &&\n            this.selectedValue.length > this.labelCount\n          ) {\n            this.displayString += ` (+${this.selectedValue.length -\n              this.labelCount} others)`;\n          }\n        }\n      } else {\n        // Single select display\n        displayOption = this.options.filter(\n          option => option[this.value] === this.selectedValue\n        );\n        if (displayOption.length) {\n          this.displayString = displayOption[0][this.display];\n        }\n      }\n    }\n    return this.displayString;\n  }\n\n  onSelectionChange(val) {\n    const filteredValues = this.getFilteredOptionsValues();\n    let count = 0;\n    if (this.multiple) {\n      this.selectedValue.filter(item => {\n        if (filteredValues.includes(item)) {\n          count++;\n        }\n      });\n      this.selectAllChecked = count === this.filteredOptions.length;\n    }\n    this.selectedValue = val.value;\n    this.selectionChange.emit(this.selectedValue);\n  }\n\n  public trackByFn(index, item) {\n    return item.value;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule, MatCheckboxModule } from '@angular/material';\nimport { SelectAutocompleteComponent } from './select-autocomplete.component';\n\n@NgModule({\n  imports: [\n    FormsModule,\n    CommonModule,\n    MatIconModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [SelectAutocompleteComponent],\n  exports: [SelectAutocompleteComponent]\n})\nexport class SelectAutocompleteModule { }\n"]}